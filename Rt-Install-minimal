#!/bin/bash
# PLEASE DO NOT SET ANY OF THE VARIABLES, THEY WILL BE POPULATED IN THE MENU
LASTMODIFIED="2023/10/10"
SCRIPTVERSION="2.0"

# Formatting variables
# colors
NORMAL=$(tput sgr0)
BOLD=$(tput bold)

#BLACK=$(tput setaf 0)
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
#BLUE=$(tput setaf 4)
MAGENTA=$(tput setaf 5)
CYAN=$(tput setaf 6)
WHITE=$(tput setaf 7)
#Not_used=$(tput setaf 8)
#DEFAULT=$(tput setaf 9)

# The system user rtorrent is going to run as
RTORRENT_USER=""
# The user that is going to log into rutorrent (htaccess)
WEB_USER=""
# Array with webusers including their hashed paswords
WEB_USER_ARRAY=()
# rTorrent users home dir.
HOMEDIR=""

# grep the Software Versions
RTVERSION=$(apt-cache policy rtorrent | head -3 | tail -1 | cut -d' ' -f4 | cut -d'-' -f1)
LIBTORRENTVERSION=$(apt-cache policy libtorrent?? | head -3 | tail -1 | cut -d' ' -f4 | cut -d':' -f2 | cut -d'-' -f1)
RUTORRENTVERSION=$(wget -q https://api.github.com/repos/Novik/ruTorrent/tags -O - | grep name | cut -d'"' -f4 | grep -v 'rutorrent\|plugins\|beta' | head -1)

# grep System architecture
ARCHITECTURE=$(dpkg --print-architecture)

# Pretty function to spit out ok/fail after each important step.
function CHECKLASTRC {
	if [ $(echo $?) -ne 0 ]
	then
		echo "${WHITE}[${RED}failed${WHITE}]${NORMAL}"
		exit 1
	else
		echo "${WHITE}[${GREEN}ok${WHITE}]${NORMAL}"
	fi
}

# Function to check if running user is root
function CHECK_ROOT {
	if [ "$(id -u)" != "0" ]
	then
		echo
		echo "${RED}This script must be run as root.${NORMAL}" 1>&2
		echo
		exit 1
	fi
}

# Checks for apache2-utils and unzip if it's installed. It's is needed to make the Web user
function APACHE_UTILS {
	AP_UT_CHECK="$(dpkg-query -W -f='${Status}' apache2-utils 2>/dev/null | grep -c "ok installed")"
	UNZIP_CHECK="$(dpkg-query -W -f='${Status}' unzip 2>/dev/null | grep -c "ok installed")"
	CURL_CHECK="$(dpkg-query -W -f='${Status}' curl 2>/dev/null | grep -c "ok installed")"
	WGET_CHECK="$(dpkg-query -W -f='${Status}' wget 2>/dev/null | grep -c "ok installed")"
	
	if [ "$AP_UT_CHECK" -ne 1 ] || [ "$UNZIP_CHECK" -ne 1 ] || [ "$CURL_CHECK" -ne 1 ] || [ "$WGET_CHECK" -ne 1 ]
	then
		echo " One or more of the packages apache2-utils, unzip, curl or wget is not installed and is needed for the setup."
		read -p " Do you want to install it? [y/n] " -n 1
		if [[ $REPLY =~ [Yy]$ ]]
		then
			echo
			apt-get update
			apt-get -y install apache2-utils unzip curl wget
		else
			clear -x
			exit
			#:
		fi
	fi
}

# Header for the menu
function HEADER {
	clear -x
	echo "${WHITE}${BOLD}--------------------------------------------------------------------------------"
	echo "                       ${CYAN}Rtorrent + Rutorrent Auto Install"
	echo "                       Bercik https://github.com/Bercik1337${NORMAL}"
	echo "${BOLD}--------------------------------------------------------------------------------${NORMAL}"
	echo
}

# License
function LICENSE {
	#clear -x
	#echo "${NORMAL}${BOLD}--------------------------------------------------------------------------------"
	echo " ${NORMAL}THE BEER-WARE LICENSE (Revision 42):"
	echo " ${GREEN}Bercik${NORMAL} wrote this script. As long as you retain this notice you"
	echo " can do whatever you want with this stuff. If we meet some day, and you"
	echo " think this stuff is worth it, you can buy me a beer in return.${NORMAL}"
	echo
	echo " Contact? use Github https://github.com/Bercik1337"
	echo
	echo "${BOLD}--------------------------------------------------------------------------------${NORMAL}"
	echo
	read -n 1 -s -p ' Press any key to continue...'
	echo
}

function WAIT_A_MINUTE {
	echo "${NORMAL}${BOLD}--------------------------------------------------------------------------------"
	echo " ${NORMAL}Now you will be ask for a valid system user and an user for the ruTorrent"
	echo " Webportal (any user possible, no bindings on system user present)"
	echo " then you will hit the Menu for the Installation and other Options."
	echo "${BOLD}--------------------------------------------------------------------------------${NORMAL}"
	sleep 10
	echo
}

# Function to set the system user, rtorrent is going to run as
function SET_RTORRENT_USER {
	while true
	do
		echo -n " Please type a valid system user: ${GREEN}"
		read RTORRENT_USER
		
		if [[ -z $(cat /etc/passwd | grep "^$RTORRENT_USER:") ]]
		then
			echo
			echo " ${NORMAL}This user does not exist!"
		elif [[ $(cat /etc/passwd | grep "^$RTORRENT_USER:" | cut -d: -f3) -lt 1 ]]
		then
			echo
			echo " ${NORMAL}That user's UID is too low!"
		elif [[ $RTORRENT_USER == nobody ]]
		then
			echo
			echo " ${NORMAL}You cant use 'nobody' as user!"
		else
			HOMEDIR=$(cat /etc/passwd | grep /"$RTORRENT_USER":/ | cut -d: -f6)
			RTORRENT_GROUP=$(id -g $RTORRENT_USER)
			break
		fi
	done
}

# Function to create users for the webinterface
function SET_WEB_USER {
	while true
	do
		echo -n " ${NORMAL}Please type any username for the webinterface: ${GREEN}"
		read WEB_USER
		tput sgr0
		echo -n " ${NORMAL}New password: "
		read -s PASSWORD1
		echo
		echo -n " ${NORMAL}Re-type new password: "
		read -s PASSWORD2
		echo
		
		if [ "$PASSWORD1" == "$PASSWORD2" ]
		then
			USER=$(echo "$PASSWORD1" | htpasswd -i -n "$WEB_USER")
			if [ $? = 0 ]
			then
				WEB_USER_ARRAY+=($USER)
				break
			fi
		else
			echo
			echo " ${RED}Something went wrong!"
			echo " You have entered an unusable username and/or different passwords.${NORMAL}"
			echo
		fi
		tput sgr0
	done
}

# Function to change rtorrent port
function SET_RT_PORT {
	ACT_RANGE=$(grep "port_range" Files/rtorrent.rc | cut -d' ' -f3)
	echo -n " Please specify port range for rTorrent [act: $ACT_RANGE]: "
	read RT_PORT
	
	if [ -z "$RT_PORT" ]
	then
		echo " No changing in rtorrent.rc config file range is empty"
	else
		echo " Changing port in rtorrent.rc config file"
		sed -i "s/port_range.*/port_range = $RT_PORT/" Files/rtorrent.rc
		CHECKLASTRC
	fi
}

# Function to list WebUI users in the menu
function LIST_WEB_USERS {
	for i in ${WEB_USER_ARRAY[@]}
	do
		USER_CUT=$(echo $i | cut -d \: -f 1)
		echo -n " $USER_CUT"
	done
}

# Function for installing dependencies
function APT_DEPENDENCIES {
	echo "${CYAN}Installing dependencies${NORMAL}"
	apt-get update
	apt-get -y install openssl git apache2 apache2-utils unrar-free php php-curl php-cli libapache2-mod-php tmux unzip curl mediainfo unrar-free
	CHECKLASTRC
}

# SCGI installation because it isn't supported anymore after php7.4
function INSTALL_SCGI {
	SCGI=$(apt-cache show libapache2-mod-scgi 2>&1 | grep -cv "E: No packages found")
	
	if [ $SCGI -ne 1 ]
	then
		echo "${CYAN}Download scgi${NORMAL}"
		
		case $ARCHITECTURE in
		armhf)
			wget http://ftp.debian.org/debian/pool/main/s/scgi/libapache2-mod-scgi_1.13-1.1_armhf.deb;;
		armel)
			wget http://ftp.debian.org/debian/pool/main/s/scgi/libapache2-mod-scgi_1.13-1.1_armel.deb;;
		arm64)
			wget http://ftp.debian.org/debian/pool/main/s/scgi/libapache2-mod-scgi_1.13-1.1_arm64.deb;;
		amd64)
			wget http://mirrors.kernel.org/ubuntu/pool/universe/s/scgi/libapache2-mod-scgi_1.13-1.1build1_amd64.deb;;
		esac
		
		echo "${CYAN}Install scgi${NORMAL}"
		dpkg -i libapache2*.deb
		rm -f libapache2*.deb
	else
		echo "${CYAN}Install scgi${NORMAL}"
		apt-get -y install libapache2-mod-scgi
	fi
	CHECKLASTRC
}

# Function for setting up xmlrpc, libtorrent and rtorrent
function INSTALL_RTORRENT {
	# Download and install rtorrent
	echo "${CYAN}Install rtorrent${NORMAL}"
	apt-get -y install rtorrent
	CHECKLASTRC
	
	ldconfig
	
	# Creating session directory
	echo "${CYAN}Creating session directory ${NORMAL}"
	if [ ! -d "$HOMEDIR"/.rtorrent-session ]
	then
		mkdir "$HOMEDIR"/.rtorrent-session
		chown "$RTORRENT_USER":"$RTORRENT_GROUP" "$HOMEDIR"/.rtorrent-session
		CHECKLASTRC
	else
		chown "$RTORRENT_USER":"$RTORRENT_GROUP" "$HOMEDIR"/.rtorrent-session
		CHECKLASTRC
	fi
	
	# Creating downloads folder
	echo "${CYAN}Creating Downloads directory ${NORMAL}"
	if [ ! -d "$HOMEDIR"/Downloads ]
	then
		mkdir "$HOMEDIR"/Downloads
		chown "$RTORRENT_USER":"$RTORRENT_GROUP" "$HOMEDIR"/Downloads
		CHECKLASTRC
	else
		chown "$RTORRENT_USER":"$RTORRENT_GROUP" "$HOMEDIR"/Downloads
		CHECKLASTRC
	fi
	
	# Copying rtorrent.rc file.
	echo "${CYAN}Copying rtorrent.rc${NORMAL}"
	cp Files/rtorrent.rc $HOMEDIR/.rtorrent.rc
	CHECKLASTRC
	chown "$RTORRENT_USER":"$RTORRENT_GROUP" $HOMEDIR/.rtorrent.rc
}

function INSTALL_SYSTEMD_SERVICE {
	cat > "/etc/systemd/system/rtorrent.service" <<-EOF
	[Unit]
	Description=rtorrent (in tmux)

	[Service]
	Type=forking
	RemainAfterExit=yes
	User=$RTORRENT_USER
	ExecStart=/usr/bin/tmux -2 new-session -d -s rtorrent rtorrent
	ExecStop=/usr/bin/tmux send-keys -t rtorrent:rtorrent C-q
	RemainAfterExit=no
	Restart=on-failure
	RestartSec=5s

	[Install]
	WantedBy=default.target
EOF
	
	systemctl enable rtorrent.service
	systemctl start rtorrent.service
}

# Function for installing rutorrent and plugins
function INSTALL_RUTORRENT {
	# Installing rutorrent.
	echo "${CYAN}Installing rutorrent${NORMAL}"
	echo "${YELLOW}Downloading package${NORMAL}"
	curl -L https://github.com/Novik/ruTorrent/archive/refs/tags/$RUTORRENTVERSION.zip -o rutorrent.zip
	CHECKLASTRC
	
	echo "${YELLOW}Unpacking${NORMAL}"
	unzip -qq rutorrent.zip
	CHECKLASTRC
	
	echo "${YELLOW}Renaming${NORMAL}"
	LATEST="ruTorrent-${RUTORRENTVERSION:1}"
	mv $LATEST rutorrent
	CHECKLASTRC
	
	if [ -d /var/www/rutorrent ]
	then
		rm -r /var/www/rutorrent
	fi
	
	# Deactivate not supported plugins
	# not supported: _cloudflare, screenshots, spectrogram
	# not possible by folder rights: rutracker_check
	# removed since it's deprecated: geoip
	PLUGINS=("_cloudflare" "screenshots" "spectrogram" "rutracker_check" "geoip")
	for PLUGIN in ${PLUGINS[@]}
	do
		sed -i '$a['"$PLUGIN"']' rutorrent/conf/plugins.ini
		sed -i '$aenabled = no' rutorrent/conf/plugins.ini
	done
	
	# Changeing SCGI mount point in rutorrent config.
	echo "${YELLOW}Changing SCGI mount point${NORMAL}"
	sed -i "s/\/RPC2/\/rutorrent\/RPC2/g" rutorrent/conf/config.php
	CHECKLASTRC
	
	echo "${YELLOW}Moving to /var/www/ ${NORMAL}"
	mv -f rutorrent /var/www/
	CHECKLASTRC
	
	echo "${YELLOW}Cleanup${NORMAL}"
	rm rutorrent.zip
	CHECKLASTRC
	
	# Changing permissions for rutorrent and plugins.
	echo "${CYAN}Changing permissions for rutorrent${NORMAL}"
	chown -R www-data:www-data /var/www/rutorrent
	chmod -R 775 /var/www/rutorrent
	CHECKLASTRC
}

# Function for configuring apache
function CONFIGURE_APACHE {
	# Creating self-signed certs
	openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -subj "/OU=Bercik rt-auto-install seedbox"  -keyout /etc/ssl/private/rutorrent-selfsigned.key -out /etc/ssl/certs/rutorrent-selfsigned.crt
	
	if ! grep -q "^ServerName$" /etc/apache2/apache2.conf
	then
		echo "ServerName localhost" >> /etc/apache2/apache2.conf;
	fi
	
	# Creating Apache virtual host
	echo "${CYAN}Creating apache vhost${NORMAL}"
	if [ ! -f /etc/apache2/sites-available/rutorrent.conf ]
	then
		cp Files/rutorrent.conf /etc/apache2/sites-available/rutorrent.conf
		a2enmod ssl
		a2enmod rewrite
		
		a2dissite 000-default.conf
		a2ensite rutorrent.conf
		CHECKLASTRC
		
		systemctl restart apache2.service
	fi
	
	# Creating .htaccess file
	printf "%s\n" "${WEB_USER_ARRAY[@]}" > /var/www/rutorrent/.htpasswd
}

# Function for showing the end result when install is complete
function INSTALL_COMPLETE {
	HEADER
	echo "${GREEN}Installation is complete.${NORMAL}"
	echo
	echo "${RED}Your default Apache2 vhost file has been disabled and replaced with a new one."
	echo "If you were using it, combine the default and rutorrent vhost file and enable"
	echo "it again.${NORMAL}"
	echo
	echo "${MAGENTA}Your downloads folder is in ${CYAN}$HOMEDIR/Downloads${NORMAL}"
	echo "${MAGENTA}Sessions data is ${CYAN}$HOMEDIR/.rtorrent-session${NORMAL}"
	echo "${MAGENTA}rtorrent's configuration file is ${CYAN}$HOMEDIR/.rtorrent.rc${NORMAL}"
	echo
	echo "${MAGENTA}If you want to change settings for rtorrent, such as download folder, etc.,"
	echo "you need to edit the '${CYAN}.rtorrent.rc${MAGENTA}' file. E.g. '${CYAN}nano $HOMEDIR/.rtorrent.rc${MAGENTA}'${NORMAL}"
	echo
	
	# The IPv6 local address, is not very used for now, anyway if needed, just change 'inet' to 'inet6'
	lcl=$(ip addr | grep 'inet ' | awk '{print $2}' | cut -d/ -f1 | grep -v "127." | head -n 1)
	ext=$(curl -s https://ipv4.icanhazip.com/)
	
	if [[ ! -z "$lcl" ]] && [[ ! -z "$ext" ]]
	then
		if [[ $HTTP_PORT != "" ]]
		then
			echo "${CYAN}LOCAL IP:${NORMAL} http://$lcl:$HTTP_PORT/rutorrent"
		else
			echo "${CYAN}LOCAL IP:${NORMAL} http://$lcl/rutorrent"
		fi
		echo "${CYAN}EXTERNAL IP:${NORMAL} http://$ext/rutorrent"
		echo
		echo "Visit rutorrent through the above address."
		echo "${RED}Now available with HTTPS redirection!${NORMAL}"
	else
		if [[ -z "$lcl" ]]
		then
			echo "Can't detect the local IP address"
			echo "Try visit rutorrent at http://127.0.0.1/rutorrent"
			echo
		elif [[ -z "$ext" ]]
		then
			echo "${CYAN}LOCAL:${NORMAL} http://$lcl/rutorrent"
			echo "Visit rutorrent through your local network"
			echo
		else
			echo "Can't detect the IP address"
			echo "Try visit rutorrent at http://127.0.0.1/rutorrent"
			echo
		fi
	fi
}

# Fetch and modify changelog and todo list
function CHANGELOG_TODO {
	mkdir -p Files
	FILES=("Changelog" "TODO")
	for FILE in ${FILES[@]}
	do
		curl -sL https://raw.githubusercontent.com/Bercik1337/rt-auto-install/master/$FILE  -o Files/$FILE
		sed -i "s/- - -.*/- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - /g" Files/$FILE
	done
}

# Function for creating file structure before installation
function PREPARE_CONFIG_FILES {
	echo "${CYAN}Prepare config files"
	
	cat > "Files/rutorrent.conf" << 'EOF'
<VirtualHost *:80>
	ServerAlias *
	RewriteEngine on
	RewriteRule ^/(.*) https://%{HTTP_HOST}/$1 [NC,R=301,L]
</VirtualHost>

<IfModule mod_ssl.c>
	<VirtualHost *:443>
		#ServerName  www.example.com
		DocumentRoot /var/www/
		
		LogLevel info ssl:warn
		ErrorLog /var/log/apache2/ssl_error.log
		CustomLog /var/log/apache2/ssl_access.log common
		SCGIMount /rutorrent/RPC2 127.0.0.1:5000
		
		<Directory "/var/www/rutorrent">
			AuthName "Tits or GTFO"
			AuthType Basic
			Require valid-user
			AuthUserFile /var/www/rutorrent/.htpasswd
		</Directory>
		
		SSLEngine on
		SSLCertificateFile /etc/ssl/certs/rutorrent-selfsigned.crt
		SSLCertificateKeyFile /etc/ssl/private/rutorrent-selfsigned.key
	</VirtualHost>
</IfModule>
EOF
	
	cat > "Files/rtorrent.rc" << 'EOF'
	# This is an example resource file for rTorrent. Copy to
	# ~/.rtorrent.rc and enable/modify the options as needed. Remember to
	# uncomment the options you wish to enable.

	# Maximum and minimum number of peers to connect to per torrent.
	#min_peers = 40
	#max_peers = 100

	# Same as above but for seeding completed torrents (-1 = same as downloading)
	#min_peers_seed = 10
	#max_peers_seed = 50

	# Maximum number of simultanious uploads per torrent.
	#max_uploads = 15

	# Global upload and download rate in KiB. "0" for unlimited.
	#download_rate = 0
	#upload_rate = 0

	# Default directory to save the downloaded torrents.
	directory = ~/Downloads

	# Default session directory. Make sure you don't run multiple instance
	# of rtorrent using the same session directory. Perhaps using a
	# relative path?
	session = ~/.rtorrent-session

	# Watch a directory for new torrents, and stop those that have been
	# deleted.
	#schedule = watch_directory,5,5,load_start=./watch/*.torrent
	#schedule = untied_directory,5,5,stop_untied=

	# Close torrents when diskspace is low.
	schedule = low_diskspace,5,60,close_low_diskspace=100M

	# The ip address reported to the tracker.
	#ip = 127.0.0.1
	#ip = rakshasa.no

	# The ip address the listening socket and outgoing connections is
	# bound to.
	#bind = 127.0.0.1
	#bind = rakshasa.no

	# Port range to use for listening.
	port_range = 6790-6999

	# Start opening ports at a random position within the port range.
	#port_random = no

	# Check hash for finished torrents. Might be usefull until the bug is
	# fixed that causes lack of diskspace not to be properly reported.
	check_hash = no

	# Set whetever the client should try to connect to UDP trackers.
	#use_udp_trackers = yes

	# Alternative calls to bind and ip that should handle dynamic ip's.
	#schedule = ip_tick,0,1800,ip=rakshasa
	#schedule = bind_tick,0,1800,bind=rakshasa

	# Encryption options, set to none (default) or any combination of the following:
	# allow_incoming, try_outgoing, require, require_RC4, enable_retry, prefer_plaintext
	#
	# The example value allows incoming encrypted connections, starts unencrypted
	# outgoing connections but retries with encryption if they fail, preferring
	# plaintext to RC4 encryption after the encrypted handshake
	encryption = allow_incoming,enable_retry,try_outgoing

	# Enable DHT support for trackerless torrents or when all trackers are down.
	# May be set to "disable" (completely disable DHT), "off" (do not start DHT),
	# "auto" (start and stop DHT as needed), or "on" (start DHT immediately).
	# The default is "off". For DHT to work, a session directory must be defined.
	#dht = auto

	# UDP port to use for DHT.
	#dht_port = 6881

	# Enable peer exchange (for torrents not marked private)
	#peer_exchange = yes

	#
	# Do not modify the following parameters unless you know what you're doing.
	#

	# Hash read-ahead controls how many MB to request the kernel to read
	# ahead. If the value is too low the disk may not be fully utilized,
	# while if too high the kernel might not be able to keep the read
	# pages in memory thus end up trashing.
	#hash_read_ahead = 10

	# Interval between attempts to check the hash, in milliseconds.
	#hash_interval = 100

	# Number of attempts to check the hash while using the mincore status,
	# before forcing. Overworked systems might need lower values to get a
	# decent hash checking rate.
	#hash_max_tries = 10

	scgi_port = 127.0.0.1:5000

	# Heavy I/O seedbox configuration
	# Uncomment lines below if you have 1Gbit+ Internet link
	# thanks Zebirek
	#
	#pieces.memory.max.set = 8048M
	#network.max_open_sockets.set = 999
	#network.max_open_files.set = 600
	#network.http.max_open.set = 99
	#network.receive_buffer.size.set =  32M
	#network.send_buffer.size.set    = 64M
	#pieces.preload.type.set = 2
	#pieces.preload.min_size.set = 262144
	#pieces.preload.min_rate.set = 5120
EOF
}

function MENU() {
	while true
	do
		HEADER
		echo " ${BOLD}    rTorrent version:${NORMAL} ${RED} $RTVERSION ${NORMAL}"
		echo " ${BOLD}  libTorrent version:${NORMAL} ${RED} $LIBTORRENTVERSION ${NORMAL}"
		echo " ${BOLD}   ruTorrent version:${NORMAL} ${RED} $RUTORRENTVERSION ${NORMAL}"
		echo " ${BOLD}      Script version:${NORMAL} ${RED} $SCRIPTVERSION ${NORMAL}"
		echo " ${BOLD}Script last modified:${NORMAL} ${RED} $LASTMODIFIED ${NORMAL}"
		echo " Remember to visit https://github.com/Bercik1337/rt-auto-install ${NORMAL}"
		echo
		echo " ${BOLD}rTorrent user:${NORMAL}${GREEN} $RTORRENT_USER${NORMAL}"
		echo -n " ${BOLD}ruTorrent user(s):${NORMAL}${GREEN}"
		LIST_WEB_USERS
		echo
		echo "${NORMAL}"
		echo " [1] - Change rTorrent user"
		echo " [2] - Add another ruTorrent user"
		echo " [c] - Show Changelog"
		echo " [t] - Show TODO"
		ACT_RANGE=$(grep "port_range" Files/rtorrent.rc | cut -d' ' -f3)
		echo " [p] - Change rTorrent Port-Range [act: ${GREEN}$ACT_RANGE${NORMAL}]"
		echo " [0] - Start installation"
		echo " [q] - Quit"
		echo
		echo -n "${GREEN}>>${NORMAL} "
		read case
		
		case "$case" in
		1)
			HEADER
			SET_RTORRENT_USER;;
		2)
			HEADER
			SET_WEB_USER;;
		c)
			HEADER
			head -n 17 Files/Changelog
			read -rsp $'Press any key to continue...' -n1 ke;;
		t)
			HEADER
			head -n 17 Files/TODO
			read -rsp $'Press any key to continue...' -n1 ke;;
		p)
			HEADER
			SET_RT_PORT;;
		0)
			APT_DEPENDENCIES
			INSTALL_SCGI
			INSTALL_RTORRENT
			INSTALL_RUTORRENT
			CONFIGURE_APACHE
			INSTALL_SYSTEMD_SERVICE
			clear -x
			INSTALL_COMPLETE
			rm -rf Files
			break;;
		q)
			rm -rf Files
			break;;
		esac
	done
}

function START() {
	CHECK_ROOT
	APACHE_UTILS
	HEADER
	LICENSE
	echo
	WAIT_A_MINUTE
	HEADER
	SET_RTORRENT_USER
	echo
	SET_WEB_USER
	CHANGELOG_TODO
	PREPARE_CONFIG_FILES
	MENU
	tput sgr0
}

START
